import 'dart:io';

class Dnode<T> {
  T nodeValue; // data value of the node
  Dnode<T>? prev; // previous node in the list
  Dnode<T>? next; // next node in the list

  // Constructor
  Dnode(this.nodeValue) : prev = null, next = null;
}

class DoublyLinkedList<T> {
  Dnode<T>? head;

  // Cek jika list kosong
  bool isEmpty() => head == null;

  // Menambah data baru di akhir
  void append(T data) {
    Dnode<T> newNode = Dnode<T>(data);
    if (isEmpty()) {
      head = newNode;
    } else {
      Dnode<T>? temp = head;
      while (temp!.next != null) {
        temp = temp.next;
      }
      temp.next = newNode;
      newNode.prev = temp;
    }
  }

  // Menambahkan data sebelum head
  void insertBeforeHead(T data) {
    Dnode<T> newNode = Dnode<T>(data);
    if (isEmpty()) {
      append(data);
    } else {
      newNode.next = head;
      head!.prev = newNode;
      head = newNode;
    }
  }

  // Menambahkan data di akhir node
  void insertTailNode(T data) {
    Dnode<T> newNode = Dnode<T>(data);
    if (isEmpty()) {
      append(data);
    } else {
      Dnode<T>? temp = head;
      while (temp!.next != null) {
        temp = temp.next;
      }
      temp.next = newNode;
      newNode.prev = temp;
    }
  }

  // Mencetak daftar
  void printList() {
    Dnode<T>? node = head;
    Dnode<T>? tail;
    tail = null;

    print("Traversal in Forward Direction: ");
    while (node != null) {
      stdout.write("${node.nodeValue} ");
      tail = node;
      node = node.next;
    }

    print("\nTraversal in Reverse Direction: ");
    while (tail != null) {
      stdout.write("${tail.nodeValue} ");
      tail = tail.prev;
    }
    print("");
  }
}

void main() {
  DoublyLinkedList<int> list = DoublyLinkedList<int>();
  list.append(10);
  list.append(20);
  list.insertBeforeHead(5);
  list.insertTailNode(30);

  list.printList();
}
